# Generated by carnix 0.6.5: carnix Cargo.lock -o default.nix
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  all_crates = f: all_crates_1_1_1 { features = all_crates_1_1_1_features { all_crates_1_1_1 = f; }; };
  all_crates_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "all_crates";
    version = "1.1.1";
    authors = [  ];
    src = ./.;
    inherit dependencies buildDependencies features;
  };
  byteorder_1_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byteorder";
    version = "1.2.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1wsxnqcscg4gchdmgdbwc78lw2qx2i6bnjd564xq7h7qc4fp2157";
    inherit dependencies buildDependencies features;
  };
  capnp_0_8_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "capnp";
    version = "0.8.15";
    authors = [ "David Renshaw <dwrenshaw@gmail.com>" ];
    sha256 = "0nnmp2lq8wjh3cj5nfa8nlmz0fln2dyjsy499n55xxk3yqwim7a4";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  capnpc_0_8_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "capnpc";
    version = "0.8.8";
    authors = [ "David Renshaw <dwrenshaw@gmail.com>" ];
    sha256 = "1kxfkiv34ihb6xhc27nbink2x328gfa42p0m5bkkrmrmim3mghj9";
    libPath = "src/lib.rs";
    crateBin = [ {  name = "capnpc-rust";  path = "src/main.rs"; } ];
    inherit dependencies buildDependencies features;
  };
  cc_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cc";
    version = "1.0.4";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1bhxmq231c62amw14lghz5xi2cjvm0r7kp3ajsj6zqw9843zwkfw";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_36_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.36";
    authors = [ "The Rust Project Developers" ];
    sha256 = "01633h4yfqm0s302fm0dlba469bx8y6cs4nqc8bqrmjqxfxn515l";
    inherit dependencies buildDependencies features;
  };
  libloading_0_5_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libloading";
    version = "0.5.0";
    authors = [ "Simonas Kazlauskas <libloading@kazlauskas.me>" ];
    sha256 = "11vzjaka1y979aril4ggwp33p35yz2isvx9m5w88r5sdcmq6iscn";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  memchr_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memchr";
    version = "1.0.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "0dfb8ifl9nrc9kzgd5z91q6qg87sh285q1ih7xgrsglmqfav9lg7";
    inherit dependencies buildDependencies features;
  };
  nom_3_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "nom";
    version = "3.2.1";
    authors = [ "contact@geoffroycouprie.com" ];
    sha256 = "1vcllxrz9hdw6j25kn020ka3psz1vkaqh1hm3yfak2240zrxgi07";
    inherit dependencies buildDependencies features;
  };
  num_cpus_1_8_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.8.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1y6qnd9r8ga6y8mvlabdrr73nc8cshjjlzbvnanzyj9b8zzkfwk2";
    inherit dependencies buildDependencies features;
  };
  rustfbp_0_3_34_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustfbp";
    version = "0.3.34";
    authors = [ "Denis Michiels <dmichiels@gmail.com>" "Stewart Mackenzie <setori88@gmail.com>" ];
    src = ../rustfbp;
    inherit dependencies buildDependencies features;
  };
  threadpool_1_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "threadpool";
    version = "1.7.1";
    authors = [ "The Rust Project Developers" "Corey Farwell <coreyf@rwell.org>" "Stefan Schindler <dns2utf8@estada.ch>" ];
    sha256 = "09g715plrn59kasvigqjrjqzcgqnaf6v6pia0xx03f18kvfmkq06";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.4";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1qbrf5dcnd8j36cawby5d9r5vx07r0l4ryf672pfncnp8895k9lx";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  all_crates_1_1_1 = { features?(all_crates_1_1_1_features {}) }: all_crates_1_1_1_ {
    dependencies = mapFeatures features ([ capnp_0_8_15 capnpc_0_8_8 nom_3_2_1 rustfbp_0_3_34 ]);
  };
  all_crates_1_1_1_features = f: updateFeatures f (rec {
    all_crates_1_1_1.default = (f.all_crates_1_1_1.default or true);
    capnp_0_8_15.default = true;
    capnpc_0_8_8.default = true;
    nom_3_2_1.default = true;
    rustfbp_0_3_34.default = true;
  }) [ capnp_0_8_15_features capnpc_0_8_8_features nom_3_2_1_features rustfbp_0_3_34_features ];
  byteorder_1_2_1 = { features?(byteorder_1_2_1_features {}) }: byteorder_1_2_1_ {
    features = mkFeatures (features.byteorder_1_2_1 or {});
  };
  byteorder_1_2_1_features = f: updateFeatures f (rec {
    byteorder_1_2_1.default = (f.byteorder_1_2_1.default or true);
    byteorder_1_2_1.std =
      (f.byteorder_1_2_1.std or false) ||
      (f.byteorder_1_2_1.default or false) ||
      (byteorder_1_2_1.default or false);
  }) [];
  capnp_0_8_15 = { features?(capnp_0_8_15_features {}) }: capnp_0_8_15_ {
    dependencies = mapFeatures features ([ byteorder_1_2_1 ]);
    features = mkFeatures (features.capnp_0_8_15 or {});
  };
  capnp_0_8_15_features = f: updateFeatures f (rec {
    byteorder_1_2_1.default = true;
    capnp_0_8_15.default = (f.capnp_0_8_15.default or true);
    capnp_0_8_15.futures =
      (f.capnp_0_8_15.futures or false) ||
      (f.capnp_0_8_15.rpc or false) ||
      (capnp_0_8_15.rpc or false);
  }) [ byteorder_1_2_1_features ];
  capnpc_0_8_8 = { features?(capnpc_0_8_8_features {}) }: capnpc_0_8_8_ {
    dependencies = mapFeatures features ([ capnp_0_8_15 ]);
  };
  capnpc_0_8_8_features = f: updateFeatures f (rec {
    capnp_0_8_15.default = true;
    capnpc_0_8_8.default = (f.capnpc_0_8_8.default or true);
  }) [ capnp_0_8_15_features ];
  cc_1_0_4 = { features?(cc_1_0_4_features {}) }: cc_1_0_4_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.cc_1_0_4 or {});
  };
  cc_1_0_4_features = f: updateFeatures f (rec {
    cc_1_0_4.default = (f.cc_1_0_4.default or true);
    cc_1_0_4.rayon =
      (f.cc_1_0_4.rayon or false) ||
      (f.cc_1_0_4.parallel or false) ||
      (cc_1_0_4.parallel or false);
  }) [];
  libc_0_2_36 = { features?(libc_0_2_36_features {}) }: libc_0_2_36_ {
    features = mkFeatures (features.libc_0_2_36 or {});
  };
  libc_0_2_36_features = f: updateFeatures f (rec {
    libc_0_2_36.default = (f.libc_0_2_36.default or true);
    libc_0_2_36.use_std =
      (f.libc_0_2_36.use_std or false) ||
      (f.libc_0_2_36.default or false) ||
      (libc_0_2_36.default or false);
  }) [];
  libloading_0_5_0 = { features?(libloading_0_5_0_features {}) }: libloading_0_5_0_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_4 ]);
  };
  libloading_0_5_0_features = f: updateFeatures f (rec {
    cc_1_0_4.default = true;
    libloading_0_5_0.default = (f.libloading_0_5_0.default or true);
    winapi_0_3_4.default = true;
    winapi_0_3_4.errhandlingapi = true;
    winapi_0_3_4.libloaderapi = true;
    winapi_0_3_4.winerror = true;
  }) [ cc_1_0_4_features winapi_0_3_4_features ];
  memchr_1_0_2 = { features?(memchr_1_0_2_features {}) }: memchr_1_0_2_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.memchr_1_0_2.libc or false then [ libc_0_2_36 ] else []));
    features = mkFeatures (features.memchr_1_0_2 or {});
  };
  memchr_1_0_2_features = f: updateFeatures f (rec {
    libc_0_2_36.default = (f.libc_0_2_36.default or false);
    libc_0_2_36.use_std =
      (f.libc_0_2_36.use_std or false) ||
      (memchr_1_0_2.use_std or false) ||
      (f.memchr_1_0_2.use_std or false);
    memchr_1_0_2.default = (f.memchr_1_0_2.default or true);
    memchr_1_0_2.libc =
      (f.memchr_1_0_2.libc or false) ||
      (f.memchr_1_0_2.default or false) ||
      (memchr_1_0_2.default or false) ||
      (f.memchr_1_0_2.use_std or false) ||
      (memchr_1_0_2.use_std or false);
    memchr_1_0_2.use_std =
      (f.memchr_1_0_2.use_std or false) ||
      (f.memchr_1_0_2.default or false) ||
      (memchr_1_0_2.default or false);
  }) [ libc_0_2_36_features ];
  nom_3_2_1 = { features?(nom_3_2_1_features {}) }: nom_3_2_1_ {
    dependencies = mapFeatures features ([ memchr_1_0_2 ]);
    features = mkFeatures (features.nom_3_2_1 or {});
  };
  nom_3_2_1_features = f: updateFeatures f (rec {
    memchr_1_0_2.default = (f.memchr_1_0_2.default or false);
    memchr_1_0_2.use_std =
      (f.memchr_1_0_2.use_std or false) ||
      (nom_3_2_1.std or false) ||
      (f.nom_3_2_1.std or false);
    nom_3_2_1.compiler_error =
      (f.nom_3_2_1.compiler_error or false) ||
      (f.nom_3_2_1.nightly or false) ||
      (nom_3_2_1.nightly or false);
    nom_3_2_1.default = (f.nom_3_2_1.default or true);
    nom_3_2_1.lazy_static =
      (f.nom_3_2_1.lazy_static or false) ||
      (f.nom_3_2_1.regexp_macros or false) ||
      (nom_3_2_1.regexp_macros or false);
    nom_3_2_1.regex =
      (f.nom_3_2_1.regex or false) ||
      (f.nom_3_2_1.regexp or false) ||
      (nom_3_2_1.regexp or false);
    nom_3_2_1.regexp =
      (f.nom_3_2_1.regexp or false) ||
      (f.nom_3_2_1.regexp_macros or false) ||
      (nom_3_2_1.regexp_macros or false);
    nom_3_2_1.std =
      (f.nom_3_2_1.std or false) ||
      (f.nom_3_2_1.default or false) ||
      (nom_3_2_1.default or false);
    nom_3_2_1.stream =
      (f.nom_3_2_1.stream or false) ||
      (f.nom_3_2_1.default or false) ||
      (nom_3_2_1.default or false);
  }) [ memchr_1_0_2_features ];
  num_cpus_1_8_0 = { features?(num_cpus_1_8_0_features {}) }: num_cpus_1_8_0_ {
    dependencies = mapFeatures features ([ libc_0_2_36 ]);
  };
  num_cpus_1_8_0_features = f: updateFeatures f (rec {
    libc_0_2_36.default = true;
    num_cpus_1_8_0.default = (f.num_cpus_1_8_0.default or true);
  }) [ libc_0_2_36_features ];
  rustfbp_0_3_34 = { features?(rustfbp_0_3_34_features {}) }: rustfbp_0_3_34_ {
    dependencies = mapFeatures features ([ capnp_0_8_15 libloading_0_5_0 threadpool_1_7_1 ]);
  };
  rustfbp_0_3_34_features = f: updateFeatures f (rec {
    capnp_0_8_15.default = true;
    libloading_0_5_0.default = true;
    rustfbp_0_3_34.default = (f.rustfbp_0_3_34.default or true);
    threadpool_1_7_1.default = true;
  }) [ capnp_0_8_15_features libloading_0_5_0_features threadpool_1_7_1_features ];
  threadpool_1_7_1 = { features?(threadpool_1_7_1_features {}) }: threadpool_1_7_1_ {
    dependencies = mapFeatures features ([ num_cpus_1_8_0 ]);
  };
  threadpool_1_7_1_features = f: updateFeatures f (rec {
    num_cpus_1_8_0.default = true;
    threadpool_1_7_1.default = (f.threadpool_1_7_1.default or true);
  }) [ num_cpus_1_8_0_features ];
  winapi_0_3_4 = { features?(winapi_0_3_4_features {}) }: winapi_0_3_4_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_4 or {});
  };
  winapi_0_3_4_features = f: updateFeatures f (rec {
    winapi_0_3_4.default = (f.winapi_0_3_4.default or true);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
}
